!function(){"use strict";class e{constructor(e,t,s){let{name:n,link:o}=e;this._name=n,this._link=o,this._cardSelector=t,this._handleImageClick=s}_setEventListeners(){this.likeButton=this._cardElement.querySelector(".card__like-button"),this.likeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this.deleteButton=this._cardElement.querySelector(".card__delete-button"),this.deleteButton.addEventListener("click",(()=>{this._handleDeleteCard()})),this._imageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this.likeButton.classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._imageElement=this._cardElement.querySelector(".card__image"),this._imageElement.src=this._link,this._imageElement.alt=this._name,this._titleElement=this._cardElement.querySelector(".card__title"),this._titleElement.textContent=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formSelector=e.inputSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputElements.forEach((e=>this._hideInputError(e))),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{void 0!==e[t.name]?t.value=e[t.name]:(console.log(`No data provided for input with name: ${t.name}`),t.value="")}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}getForm(){return this._form}}const o=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=u(e);o.addItem(t)}},".cards__list"),i=document.querySelector("#profile-edit-button"),r=new n("#profile-edit-modal",(e=>{m.setUserInfo({name:e.title,job:e.description}),r.close()}));r.setEventListeners(),i.addEventListener("click",(()=>{const e=m.getUserInfo();r.setInputValues({title:e.name,description:e.job}),r.open()}));const a=document.forms["Add-a-New-Card"];a.reset();const l=new n("#add-card-modal",(e=>{o.addItem(u({name:e.title,link:e.url})),l.close(),a.reset(),h["Add-a-New-Card"].disableButton()}));l.setEventListeners();const c=new class extends s{constructor(e){super(e),this._imageElement=this._popup.querySelector(".modal__preview-image"),this._captionElement=this._popup.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._imageElement.src=s,this._imageElement.alt=t,this._captionElement.textContent=t,super.open()}}("#image-preview-modal");c.setEventListeners();const m=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}}({nameSelector:".profile__title",jobSelector:".profile__description"});function d(e){c.open({name:e.name,link:e.link})}function u(t){return new e(t,"#card-template",d).getView()}o.renderItems(),document.querySelector("#profile-edit-modal");const _=document.querySelector("#image-preview-modal"),h=(_.querySelector(".modal__preview-image"),document.querySelector(".modal__caption"),_.querySelector(".modal__close"),{});var p;p={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(p.formSelector)).forEach((e=>{const s=new t(p,e),n=e.getAttribute("name");h[n]=s,s.enableValidation()})),document.querySelector(".cards__list");const E=document.querySelector("#add-card-modal"),v=E.querySelector(".modal__form"),S=(E.querySelector(".modal__close"),document.querySelector(".profile__add-button"));v.querySelector("#add-card-form"),v.querySelector("#add-url"),S.addEventListener("click",(()=>l.open()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,